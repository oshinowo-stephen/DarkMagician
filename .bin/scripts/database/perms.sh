#!/bin/bash
set -e

USER="psql_magician"
DATABASE="psql_dmg_db"
DATABASE_USER="${DATABASE}_user"

if [ -e /run/secrets/PQ_DMG_PASSWORD ]; then
	PASSW="$(< /run/secrets/PQ_DMG_PASSWORD)"
else
	PASSW=${PQ_DMG_PASSWORD}
fi

READONLY=${READONLY_ROLE}

# running the migrations...

PGPASSWORD="$POSTGRES_PASSWORD" psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" <<-EOSQL
  CREATE ROLE IF NOT EXISTS $READONLY

  CREATE USER IF NOT EXISTS $USER WITH ENCRYPTED PASSWORD '$PASSW'
  GRANT $READONLY TO $USER
EOSQL

PGPASSWORD="$POSTGRES_PASSWORD" psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" <<-EOSQL
	CREATE DATABASE IF NOT EXISTS $DATABASE
	
  CREATE ROLE IF NOT EXISTS     $DATABASE_USER
  CREATE USER IF NOT EXISTS     $USER WITH ENCRYPTED PASSWORD '$PASSW'

  GRANT $DATABASE_USER TO       $USER
  GRANT $DATABASE_USER TO       $READONLY

  REVOKE ALL ON DATABASE $DATABASE FROM PUBLIC
  GRANT CONNECT ON DATABASE $DATABASE TO $DATABASE_USER
EOSQL

PGPASSWORD="$POSTGRES_PASSWORD" psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" <<-EOSQL
  REVOKE ALL ON SCHEMA public FROM PUBLIC

  GRANT USAGE ON SCHEMA public TO $DATABASE_USER

  ALTER DEFAULT PRIVILEGES IN SCHEMA public
		GRANT USAGE, SELECT ON SEQUENCES TO $DATABASE_USER

	ALTER DEFAULT PRIVILEGES IN SCHEMA public
		GRANT SELECT ON TABLES TO $READONLY

	ALTER DEFAULT PRIVILEGES IN SCHEMA public
		GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO $USER
EOSQL