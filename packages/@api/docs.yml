openapi: 3.0.0
servers:
  - url: 'http://localhost:8080'
info:
  version: 0.1.0-beta
  title: DarkMagician API
  description: The main API for DarkMagician
tags:
  - name: Player
    description: CRUD DarkMagician's players
  - name: Decks
    description: CRUD DarkMagician's decks
  - name: Cards
    description: CRUD DarkMagician's cards
paths:
  /players:
    get:
      summary: Get all player insances
      tags:
        - Player
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerView'
    post:
      summary: Create player
      tags:
        - Player
      requestBody:
        description: player instance to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerPost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerView'
  '/players/{id}':
    get:
      summary: Get a single player instance from ID
      tags:
        - Player
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the player instance to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerView'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: update a player instance from ID
      tags:
        - Player
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the player instance to update
      requestBody:
        description: the data to update the player instance with
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerView'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: delete a player from ID
      tags:
        - Player
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the pokemon instance to delete
      responses:
        '204':
          description: no content
        '404':
          $ref: '#/components/responses/404'
  /decks:
    get:
      summary: Get all decks
      tags:
        - Decks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DecksView'
    post:
      summary: create a new deck
      tags:
        - Decks
      requestBody:
        description: deck instance to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DecksPost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecksView'
  '/decks/{player}':
    get:
      summary: get all decks from player with their ID
      tags:
        - Decks
        - Player
      parameters:
        - in: path
          name: player
          schema:
            type: string
          required: true
          description: ID of the player to grab the decks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DecksView'
  /cards:
    get:
      summary: get all cards
      tags:
        - Cards
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardsView'
    post:
      summary: create a new card
      tags:
        - Cards
      requestBody:
        description: card instance to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardsPost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardsView'
  '/cards/{player}':
    get:
      summary: get all cards from player with their ID
      tags:
        - Decks
        - Player
      parameters:
        - in: path
          name: player
          schema:
            type: string
          required: true
          description: ID of the player to grab the cards
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardsView'
components:
  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: OK'
    DecksView:
      allOf:
        - $ref: '#/components/schemas/DecksPartial'
        - type: object
          required:
            - name
            - cards
          properties:
            cards:
              $ref: '#/components/schemas/CardsView'
    DecksPost:
      allOf:
        - $ref: '#/components/schemas/DecksPartial'
        - type: object
          properties:
            id:
              type: string
              example: 47twmXb9HWzgbIIZ
    DecksUpdate:
      allOf:
        - $ref: '#/components/schemas/DecksPartial'
        - type:
            $ref: '#/components/schemas/CardsPartial'
    DecksPartial:
      type: object
      properties:
        name:
          type: string
          example: Pure Cyber Angel
        player:
          type: string
          example: 229651386223034370
          description: Player's ID
    CardsView:
      allOf:
        - $ref: '#/components/schemas/CardsPartial'
        - type: object
          required:
            - decks
            - endpoint
          properties:
            decks:
              $ref: '#/components/schemas/DecksView'
    CardsPost:
      allOf:
        - $ref: '#/components/schemas/CardsPartial'
        - type: object
          properties:
            id:
              type: number
              example: 73580471
    CardsUpdate:
      allOf:
        - $ref: '#/components/schemas/CardsPartial'
        - type:
            $ref: '#/components/schemas/DecksPartial'
    CardsPartial:
      type: object
      properties:
        endpoint:
          type: string
          example: Card's API endpoint
        player:
          type: string
          example: 229651386223034370
          description: Player's ID
    PlayerView:
      allOf:
        - $ref: '#/components/schemas/PlayerPartial'
        - type: object
          required:
            - id
            - decks
            - cards
            - currency
          properties:
            decks:
              $ref: '#/components/schemas/DecksView'
            cards:
              $ref: '#/components/schemas/CardsView'
    PlayerPost:
      allOf:
        - $ref: '#/components/schemas/PlayerUpdate'
        - type: object
          required:
            - id
            - currency
    PlayerUpdate:
      allOf:
        - $ref: '#/components/schemas/PlayerPartial'
        - type: object
          properties:
            decks:
              $ref: '#/components/schemas/DecksPartial'
            cards:
              $ref: '#/components/schemas/CardsPartial'
    PlayerPartial:
      type: obeject
      properties:
        id:
          type: string
          example: 229651386223034370
          description: Discord User ID
        currency:
          type: number
          example: 2250
          description: Player's current currency
